mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(bracket_data)
View(championship)
View(bracket_data)
library(shiny); runApp('C:/Users/Eirik/OneDrive/College/Senior/Data 332/mi_valley/mi_valley.R')
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
# read csv file
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c(NA, "longitude", "latitude"), sep = " ")
# remove parentheses from latitude and longitude columns
df$latitude <- gsub("\\(|\\)", "", df$latitude)
df$longitude <- gsub("\\(|\\)", "", df$longitude)
# convert latitude and longitude columns to numeric values
df$latitude <- as.numeric(df$latitude)
df$longitude <- as.numeric(df$longitude)
# Define the UI
ui <- fluidPage(
titlePanel("Stays in New Orleans"),
mainPanel(
tabsetPanel(
tabPanel("Introduction",
textOutput("intro_text")),
tabPanel("Map of Hotels, Motels, and Rentals",
fluidRow(
column(12, leafletOutput("map"))
)),
tabPanel("Count by Business Type",
fluidRow(
column(12, plotOutput("busn_type_plot"))
)),
tabPanel("Business Start Date",
fluidRow(
column(12, plotOutput("start_date"))
))
)))
# Define the server
server <- function(input, output) {
#Intro paragraph explaining project
output$intro_text <-renderText({
"Explanation of our project"
})
# Count by busn type
output$busn_type_plot <- renderPlot({
# pivot showing count of each busn type
busn_type <- df %>%
group_by(BusinessType) %>%
summarise(count = n())
ggplot(busn_type, aes(x = BusinessType, y = count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "Business Type", y = "Count", title = "Business Type Counts")
})
# Map of Places
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude)
})
# Business Start Date
output$start_date <- renderPlot({
start_date <- df %>%
group_by(BusinessStartDate) %>%
summarise(count = n()) %>%
arrange(BusinessStartDate) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
})
}
shinyApp(ui, server)
start_date <- df %>%
group_by(BusinessStartDate) %>%
summarise(count = n()) %>%
arrange(BusinessStartDate) %>%
mutate(cumulative_count = cumsum(count))
View(start_date)
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count)) +
geom_contour() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
start_date <- df %>%
group_by(BusinessStartDate) %>%
summarise(count = n()) %>%
arrange(BusinessStartDate) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count, group = 1)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
View(start_date)
View(df)
# pivot showing count of each busn type
busn_type <- df %>%
group_by(BusinessType) %>%
summarise(count = n())
View(busn_type)
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count, group = BusinessType)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
start_date <- df %>%
mutate(Year = lubridate::year(BusinessStartDate)) %>%
group_by(Year) %>%
summarise(count = n()) %>%
arrange(Year) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = BusinessStartDate, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
View(start_date)
start_date <- df %>%
mutate(Year = lubridate::year(BusinessStartDate)) %>%
group_by(Year, BusinessType) %>%
summarise(count = n()) %>%
arrange(Year) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
View(start_date)
start_date <- df %>%
mutate(Year = lubridate::year(BusinessStartDate)) %>%
group_by(Year, BusinessType) %>%
summarise(count = n()) %>%
arrange(Year, BusinessType) %>%
group_by(BusinessType) %>%
mutate(cumulative_count = cumsum(count))
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line() +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(size = 1.5) +
scale_color_viridis(discrete = TRUE) +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE) +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = A) +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "A") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "B") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "C") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "D") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "E") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "F") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "G") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1) +
scale_color_viridis(discrete = TRUE, option = "H") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
ggplot(start_date, aes(x = Year, y = cumulative_count,
color = BusinessType,group = BusinessType)) +
geom_line(linewidth = 1.1) +
scale_color_viridis(discrete = TRUE, option = "H") +
labs(x = "Business Start Date", y = "Count") +
ggtitle("Trend of New Business Start Dates")
View(df)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
library(leaflet)
rm(list = ls())
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
# read csv file
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c(NA, "longitude", "latitude"), sep = " ")
# remove parentheses from latitude and longitude columns
df$latitude <- gsub("\\(|\\)", "", df$latitude)
df$longitude <- gsub("\\(|\\)", "", df$longitude)
# convert latitude and longitude columns to numeric values
df$latitude <- as.numeric(df$latitude)
df$longitude <- as.numeric(df$longitude)
# Assuming the column containing the words is named "Text" in the dataframe "df"
word_counts <- table(strsplit(df$BusinessName, "\\s+"))
# View the word counts
print(word_counts)
# Split the BusinessName column into individual words using tidytext
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word)
library(tidytext)
library(tidytext)
# Split the BusinessName column into individual words using tidytext
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word)
# View the word counts
print(word_counts)
View(word_counts)
# Split the BusinessName column into individual words using tidytext
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word) %>%
arrange(n)
View(word_counts)
# Split the BusinessName column into individual words using tidytext
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word) %>%
desc(n)
# Split the BusinessName column into individual words using tidytext
word_counts <- df %>%
unnest_tokens(word, BusinessName) %>%
count(word) %>%
arrange(desc(n))
View(word_counts)
