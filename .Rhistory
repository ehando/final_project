results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(table_results)
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
# Check if there are any results
if (nrow(results) == 0) {
return("No results available")
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
ifelse(results$score1 > results$score2, results$team1, results$team2)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
library(tidyverse)
library(ggplot2)
library(shiny)
library(flextable)
# Create a dataframe with team names and scores
teams <- read.csv('tournament_data.csv') %>%
select(TEAM, KENPOM.ADJUSTED.EFFICIENCY,
BARTTORVIK.ADJUSTED.EFFICIENCY,
TURNOVER..,POINTS.PER.POSSESSION.DEFENSE, FREE.THROW..) %>%
distinct(TEAM, .keep_all = TRUE)
teams$score <- teams$KENPOM.ADJUSTED.EFFICIENCY *
teams$BARTTORVIK.ADJUSTED.EFFICIENCY *
teams$TURNOVER.. / teams$POINTS.PER.POSSESSION.DEFENSE * teams$FREE.THROW..
teams <- teams %>%
mutate(score = round(score,4))
# Seeding the teams based on their scores
teams_seeded <- teams %>%
arrange(desc(score)) %>%
mutate(seed = row_number())
# Adding a "bye" team if the number of teams is not a power of two
if (nrow(teams_seeded) %% 2 != 0) {
teams_seeded <- rbind(teams_seeded, data.frame(TEAM = "Bye", score = 0, seed = nrow(teams_seeded) + 1))
}
# Creating the bracket data
round_1 <- data.frame(
round = 1,
match = 1:(nrow(teams_seeded)%%32),
team1 = teams_seeded$TEAM[1:(nrow(teams_seeded)%%32)],
team2 = teams_seeded$TEAM[((nrow(teams_seeded)%%32) + 1):nrow(teams_seeded)]
)
round_2 <- data.frame(
round = 2,
match = 1:(nrow(round_1)/2),
team1 = ifelse(round_1$match %% 2 == 1, round_1$team1, round_1$team2),
team2 = ifelse(round_1$match %% 2 == 1, round_1$team2, round_1$team1)
)
round_3 <- data.frame(
round = 3,
match = 1:(nrow(round_2)/2),
team1 = ifelse(round_2$match %% 2 == 1, round_2$team1, round_2$team2),
team2 = ifelse(round_2$match %% 2 == 1, round_2$team2, round_2$team1)
)
round_4 <- data.frame(
round = 4,
match = 1:(nrow(round_3)/2),
team1 = ifelse(round_3$match %% 2 == 1, round_3$team1, round_3$team2),
team2 = ifelse(round_3$match %% 2 == 1, round_3$team2, round_3$team1)
)
round_5 <- data.frame(
round = 5,
match = 1:(nrow(round_4)/2),
team1 = ifelse(round_4$match %% 2 == 1, round_4$team1, round_4$team2),
team2 = ifelse(round_4$match %% 2 == 1, round_4$team2, round_4$team1)
)
championship <- data.frame(
round = 6,
match = 1,
team1 = ifelse(round_5$match %% 2 == 1, round_5$team1, round_5$team2),
team2 = ifelse(round_5$match %% 2 == 1, round_5$team2, round_5$team1)
)
# Combine all the rounds into one dataframe
bracket_data <- bind_rows(round_1, round_2, round_3, round_4, round_5, championship)
# Create a function to generate the tournament results table
table_results <- function(bracket_data) {
# Filter the data to only include the final results
results <- bracket_data %>%
filter(round == max(round))
if (nrow(results) == 0) {
return(NULL) # return NULL if no rows match the filtering criteria
}
# Create a new data frame to hold the results
winners <- data.frame(
seed = 1:nrow(results),
team = ifelse(results$score1 > results$score2, results$team1, results$team2)
)
# Order the results by seed
winners <- winners %>%
arrange(seed)
# Create a flextable with the results
ft <- flextable(winners)
# Format the table
ft <- ft %>%
set_header_labels("", "Winner") %>%
align(align = "center", part = "all") %>%
width(width = 1, part = "1") %>%
bold(part = "header")
# Return the table
return(ft)
}
print(max(bracket_data$round))
ui <- fluidPage(
titlePanel("Tournament Results"),
sidebarLayout(
sidebarPanel(),
mainPanel(
tableOutput("results_table")
)
)
)
server <- function(input, output) {
output$results_table <- renderTable({
table_results(bracket_data)
})
}
shinyApp(ui, server)
View(bracket_data)
View(championship)
View(bracket_data)
library(shiny); runApp('C:/Users/Eirik/OneDrive/College/Senior/Data 332/mi_valley/mi_valley.R')
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(viridis)
library(shiny)
rm(list = ls())
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/final_project")
df <- read.csv("data/hotels_motels.csv")
View(df)
df <- read.csv("data/hotels_motels.csv") %>%
tolower(df)
busn_type <- df %>%
group_by(BusinessType) %>%
summarise(count = n())
View(busn_type)
library(leaflet)
library(leaflet)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = LocationX, lng = LocationY)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = df$LocationX, lng = df$LocationY)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = df$LocationX, lng = -df$LocationY)
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c("latitude", "longitude"), sep = ",")
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c("lon", "lat"), sep = ",")
View(df)
df <- read.csv("data/hotels_motels.csv")
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c("type", "longitude", "latitude"), sep = "[(), ]")
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c("type", "longitude", "latitude"), sep = "\\(|\\)| ")
View(df)
df <- read.csv("data/hotels_motels.csv")
View(df)
df <- read.csv("data/hotels_motels.csv") %>%
separate(the_geom, into = c("type", "longitude", "latitude"), sep = " ")
View(df)
View(df)
# remove parentheses from latitude and longitude columns
df$latitude <- gsub("\\(|\\)", "", df$latitude)
df$longitude <- gsub("\\(|\\)", "", df$longitude)
# convert latitude and longitude columns to numeric values
df$latitude <- as.numeric(df$latitude)
df$longitude <- as.numeric(df$longitude)
View(df)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = latitude, lon = longitude)
View(df)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = latitude, lng = longitude)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = latitude, lng = df$longitude)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = df$latitude, lng = df$longitude)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = df$latitude, lng = df$longitude,
color = df$BusinessType)
View(busn_type)
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude,
color = ~BusinessType)
# map of each place with busn type color-coded
generateColorPalette <- function(data, column) {
unique_vals <- unique(data[[column]])
colors <- viridis::viridis(length(unique_vals))
setNames(colors, unique_vals)}
type_colors <- generateColorPalette(df, "BusinessType")
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude,
color = ~type_colors[BusinessType])
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = df, lat = ~latitude, lng = ~longitude,
color = ~type_colors[BusinessType])
# map of each place with busn type color-coded
generateColorPalette <- function(data, column) {
unique_vals <- unique(data[[column]])
colors <- viridis::viridis(length(unique_vals))
setNames(colors, unique_vals)}
type_colors <- generateColorPalette(df, "BusinessType")
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = df, lat = ~latitude, lng = ~longitude,
color = ~type_colors[BusinessType])
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude,
icon = ~type_colors[BusinessType])
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude)
# Define the UI
ui <- fluidPage(
leafletOutput("map"),
plotOutput("barplot")
)
# Define the server
server <- function(input, output) {
# Render the bar chart
output$barplot <- renderPlot({
ggplot(df, aes(x = BusinessType, y = count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "Business Type", y = "Count", title = "Business Type Counts")
})
# Render the map
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(data = df, lat = ~latitude, lng = ~longitude)
})
}
shinyApp(ui, server)
ggplot(df, aes(x = BusinessType, y = count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "Business Type", y = "Count", title = "Business Type Counts")
# pivot showing count of each busn type
busn_type <- df %>%
group_by(BusinessType) %>%
summarise(count = n())
ggplot(busn_type, aes(x = BusinessType, y = count)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
labs(x = "Business Type", y = "Count", title = "Business Type Counts")
